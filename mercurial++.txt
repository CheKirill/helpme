Mercurial. Test
---------------

(это вопросы самостоятельной или пункты вводного слова)

Как:
 * скопировать себе какой-нибудь репозиторий
 * перейти к какой-то ревизии в репозитории
 * сделать изменения и добавить их в историю
 * выкачать из другого репозитория новые изменения
 * влить изменения из одного места в истории в другое
 * отправить изменения в другой репозиторий

Mercurial. Other
----------------

Про эти команды я говорю просто, что они делают,
возможно, с мини-примером.

 * хеши коммитов и номера. номера локальны, хеши глобальны.
 * история: диффы и коммиты
   дифф -- это различие между файлами
   коммит -- это точка в истории или процесс создания такой точки
 * clean
  --all
 * revert
  --all
 * record, ci files
 * bisect
  Пример
 * cat ??
 * Понятие о команде hg glog
 * rollback
   не более 1 раза
   .hg/last-message.txt
 * diff / patch и его использование (в качестве shelve)

Mercurial. History editing
--------------------------

Под редактированием истории мы понимаем изменение (порядка) коммитов,
не включающих merge-коммиты.
Зачем может потребоваться редактировать историю?
Допустим, делали мы коммиты и вдруг поняли, что 5 коммитов назад
в тексте коммита содержится опечатка now --> not, из-за которой
смысл всего коммита неясен.
Другой случай: в коммиты попал код, который не принимается репозиторием,
в который мы хотим пушить.
Или сделали мы 10 коммитов, а потом поняли, что логичнее было бы последние 2
сделать в самом начале.

 * mq
   Это расширение для hg подключается так-то.
   Хотя и называется очередью (и дальше я буду говорить слово "очередь",
   больше похоже на стек).
  * qimport
   Команда принимает диапозон коммитов и помечает их как включенные в очередь.
   Пока коммит включен в очередь, он не может быть запушен.
   Нельзя включить предка текущего коммита, не включив самого коммита.
   Нельзя дважды включить коммит в очередь.
   Пример.
       qimport -r 100500:tip
  * qpop
   Снимает коммит(ы) с очереди. Из истории (hg glog) они при этом исчезают.
   Варианты:
       qpop -a
       qpop
       qpop 100500.diff
  * теперь давайте поизменяем файлы
  * diff/qdiff
   Отличие этих двух команд:
    первая показывает измения относительно зафиксированной в истории версии,
    вторая показывает ещё и изменения, которые были в изначальной версии коммита
   Команда hg st работает в этом плане так же, как и hg diff
  * qrefresh
   Эта команда заносит правки в историю (обновляет историю).
   * --edit
     Поправить текст коммита
   * --currentdate
     Изменить время коммита на текущее
   * --date
  * qpush
    Добавить коммиты в очередь.
    Порядок добавления обратен порядку снятия, как в стеке,
    чтобы в конце получилась та же последовательность коммитов, что и была.
  * .hg/patches/series
    Этот файл содержит последовательность коммитов, в которой они будут
    добавляться с помощью команды qpush
    Интересно, что сами коммиты, добавленные в очередь, хранятся в виде файлов,
    содержимое которых содержит информатцию о коммите, в частности, изменения,
    которые он вносит в файлы, текст коммита и т.д.
    Файлы лежат в папке .hg/patches
    Именно имена этих файлов и указаны в .hg/patches/series в том порядке,
    в котором их применяет команда hg qpush без аргументов.
    При этом файл удаляется и из файла .hg/patches/series
    удаляется строчка с его именем.
    команды hg qapplied   и   hg qunapplied
  * qfinish
    Это снимает с коммитов пометку, что они в очереди.
  * восхищение тем, что только что произошло: так как история хранится в виде
    изменений, а не состояний файлов, то эти изменения можно пересаживать по
    истории с места на место, а состояния файлов уже из этого вычисляются.
    Это впечатляет своими возможностями и выглядит простым для реализации,
    но не всё так просто:
  * рассмотрим ситуацию, если мы внести изменение, не совместимое с коммитами,
    которым суждено быть примененным после (во время qpush).
        пример
  * можно делать qpush, находясь не в том же месте истории, куда привел нас qpop
    Таким образом можно пересадить цепочку коммитов с одного места в другое.
    Но есть для этого другой метод, о котором пойдет речь чуть позже.


Mercurial. Branch
-----------------

Смысл веток (не только branch, а вообще):
 * доработка выпущенных версий программы независимо от транка
 * вынесение в ветку какого-то (долгосрочного) направления развития проекта,
   к примеру, усилий по добавлению какой-то фичи
 * развитие проекта другими разработчиками (пример: гитхаб, битбакет)

Эту тему я намерен рассказать слово-в-слово по этой ссылке,
разве что упущу упоминания про гит и прочее, что не в тему.
http://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial
 * tags
 * clone
 * bookmarks
 * branches
 * anonymous branches
 * Mercurial will push/pull all branches by default

 * graft
   Копирует коммиты с ветки на ветку
    * полезно при backporting'е
    * опция --edit полезна, чтобы убрать поместки типа see #123
      для системы управления проектом (тут можно дать краткую справку
      о том, что это такое и что оно как правило привязано к репозиторию)

Теперь читы...

rebase
------
   Что делает: пересаживает цепочку коммитов с места на место (помните,
   этим я закончил рассказ про редактирование истории).
   Зачем: для придания линейного вида истории, что следует делать, если
   она линейн логически (изменения, внесенные в безымянных ветках,
   независимы друг от друга). Тут пример.
   Ещё вот зачем: перешли мы на одну ветку и сделали там пару коммитов,
   а потом поняли, что делаем мы их не в той ветке, где нужно.
   Кто ещё примеров придумает, тот молодец.

   Пример.
  * --source/--dest
   Нужны редко.
   --source   самый предковый из переносимых коммитов
   --dest     кто будет новым родителей для --source
   Пример

 * strip
   Удаляет коммит и всех его потомков.
   Может разделаться с merge-коммитом.

Упражнение: я говорил, что редактировать можно только линейные участки истории.
Как бы нам обойти это ограничение, используя те команды, о которых я рассказал.

Не стоит:
--------
 - редактировать историю на тех коммитах, которые уже успели попасть куда-то
   в другие места. Это приведет к тому, что отредактированные коммиты добавятся
   отдельно, а не перепишут старые версии себя. В итоге придется каждому
   члену команды выправлять историю самостоятельно или смириться с испорченной
   историей.
   это следствие того, что запушенная история неизменяема в силу того, что
   и другие репозитории нам неподвластны ни для чего, кроме пула (и иногда пуша)

 - Не стоит включать в ветку непоследовательно идущие коммиты, к примеру, каждый
   коммит с нечетным номером. Это не имеет смысла, так как у ветки в норме есть
   не более одного начала и не более одного конца.

 - если затаскиваем две головы, а на их общий корень показывает букмарка
   Закладка встанет на ту же голову, где она стоит на сервере.
   При этом важно отметить, что по умолчанию закладки между репозиториями не
   разедляются.

 - Нельзя делать hg push, если в истории есть коммиты, импортированные в очередь
   Решение: завершить редактирование истории и выполнить hg qfinish -a

Mercurial. Commands I use
-------------------------

А эти команды повисят на экране, чтобы все убедились, что они четко
понимают, что делает каждая из них. Можем устроить блиц-опрос.

 * hg add
 * hg bisect
 * hg branch
 * hg cat
 * hg ci
 * hg clean
 * hg clone
 * hg diff
 * hg glog
 * hg heads
 * hg in
 * hg log
 * hg manifest
 * hg mv
 * hg merge
 * hg out
 * hg pull
 * hg push
 * hg qimport
 * hg rebase
 * hg record
 * hg resolve
 * hg revert
 * hg rm
 * hg st
 * hg tag
 * hg tags
 * hg up
 * hg view

